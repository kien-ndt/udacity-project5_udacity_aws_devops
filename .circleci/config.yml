version: 2.1

commands:
  delete-docker-image:
    description: Delete docker image in docker hub.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Delete docker image in docker hub.
          when: on_fail
          command: |
            yum install -y jq
            TAG="${CIRCLE_WORKFLOW_ID:0:7}"

            TOKEN=`curl -X POST "https://hub.docker.com/v2/users/login/" -H "Content-Type: application/json" -d '{"username": "'"$DOCKERHUB_USERNAME"'", "password": "'"$DOCKERHUB_PASSWORD"'"}' | jq -r .token`
            echo $TOKEN
            curl "https://hub.docker.com/v2/repositories/kienndt/devops5-be/tags/${TAG}/" \
            -X DELETE \
            -H "Authorization: JWT ${TOKEN}"

  clean-kubernetes:
    description: Delete green deployment and services
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Delete docker image in docker hub.
          when: on_fail
          command: |
            cd .circleci/ansible
            ls
            cat inventory.txt
            ansible-playbook -i inventory.txt clean-onfail.yml -vvv

jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install jest
            npm run test
  
  lint-dockerfile:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Lint backend dockerfile
          command: |
            cd backend
            docker run --rm --interactive hadolint/hadolint < Dockerfile
    
  build-dockerimage:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:   
      - checkout   
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build backend image
          command: |
            echo "$DOCKERHUB_PASSWORD"
            docker login -u $DOCKERHUB_USERNAME -p "$DOCKERHUB_PASSWORD"
            cd ./backend
            echo "NODE_ENV=production" >> .env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> .env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> .env
            docker build -t devops5-be:lastest .
            docker tag "devops5-be:lastest" "kienndt/devops5-be:${CIRCLE_WORKFLOW_ID:0:7}"
            docker push "kienndt/devops5-be:${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-green-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["87:b6:37:6b:09:db:10:6f:96:75:e9:78:9c:47:7b:de"]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip python3 openssh openssh-clients
            python3 -m pip install ansible==2.9.22
            ansible --version
      - run:
          name: Run deploy job
          command: |
            cd .circleci/ansible
            ls
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-green-backend.yml -vvv
      - delete-docker-image:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://3.235.1.188:30033/api/status"
            echo "$API_URL"
            if curl "${API_URL}" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - delete-docker-image:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - clean-kubernetes:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-greentoblue-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["87:b6:37:6b:09:db:10:6f:96:75:e9:78:9c:47:7b:de"]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip python3 openssh openssh-clients
            python3 -m pip install ansible==2.9.22
            ansible --version
      - run:
          name: Run deploy job
          command: |
            cd .circleci/ansible
            ls
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-greentoblue-backend.yml -vvv
      - delete-docker-image:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - clean-kubernetes:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["87:b6:37:6b:09:db:10:6f:96:75:e9:78:9c:47:7b:de"]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip python3 openssh openssh-clients
            python3 -m pip install ansible==2.9.22
            ansible --version
      - run:
          name: Run deploy job
          command: |
            cd .circleci/ansible
            ls
            cat inventory.txt
            ansible-playbook -i inventory.txt cleanup.yml -vvv
      - delete-docker-image:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - clean-kubernetes:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

workflows:
  default:
    jobs:
      # - build-backend
      # - test-backend
      - lint-dockerfile
      # - build-dockerimage:
      #     requires: [build-backend, test-backend]
      # - deploy-green-backend:
      #     requires: [build-dockerimage]
      # - smoke-test:
      #     requires: [deploy-green-backend]
      # - deploy-greentoblue-backend:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [deploy-greentoblue-backend]
