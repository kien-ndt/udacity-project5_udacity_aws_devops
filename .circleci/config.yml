version: 2.1
      
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here
#       when:
#         type: string
#       id:
#         type: string
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
#             aws s3 rm s3://udapeople-<< parameters.id >> --recursive
#             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
#   revert-migrations:
#     parameters:
#       when:
#         type: string
#       id:
#         type: string
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             cd backend
#             SUCCESS=$(curl -H "token: udacity-project3-devops" --request GET http://ec2-34-230-47-86.compute-1.amazonaws.com:3000/DB_MIGRATION_<< parameters.id >>)
#             echo $SUCCESS
#             if [[ "$SUCCESS" == "success" ]]
#             then
#               npm run migrations:revert
#             fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            export API_URL=""
            echo "${API_URL}"
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install jest
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install jest
            npm run test
    
  build-dockerimage:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:   
      - checkout   
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build backend image
          command: |
            echo "$DOCKER_PASSWORD"
            docker login -u $DOCKER_USERNAME -p "$DOCKER_PASSWORD"
            docker build -t devops5-be:lastest ./backend/
            docker tag "devops5-be:lastest" "kienndt/devops5-be:${CIRCLE_WORKFLOW_ID:0:7}"
            docker push "kienndt/devops5-be:${CIRCLE_WORKFLOW_ID:0:7}"
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install package
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt

  # configure-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["87:b6:37:6b:09:db:10:6f:96:75:e9:78:9c:47:7b:de"]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip python3 openssh openssh-clients
  #           python3 -m pip install ansible==2.9.22
  #           ansible --version
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Configure server
  #         command: |
  #           pwd
  #           ls -a 
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt configure-server.yml -vvv
  #     - destroy-environment:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install AWS CLI
  #         command: |
  #           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           unzip awscliv2.zip
  #           sudo ./aws/install
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #           cat migrations_dump.txt
  #     - run:
  #         name: Send migration results to custom server EC2
  #         command: |
  #           echo "Workflow=${CIRCLE_WORKFLOW_ID:0:7}"
  #           cd backend
  #           cat migrations_dump.txt
  #           if grep -q "has been executed successfully" migrations_dump.txt
  #           then
  #             curl -H "Content-Type: text/plain" -H "token: udacity-project3-devops" --request POST --data "success" http://ec2-34-230-47-86.compute-1.amazonaws.com:3000/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
  #           else
  #             curl -H "Content-Type: text/plain" -H "token: udacity-project3-devops" --request POST --data "fail" http://ec2-34-230-47-86.compute-1.amazonaws.com:3000/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
  #           fi
  #     - destroy-environment:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail

  # deploy-frontend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         name: Restore dependencies frontend-build node_modules
  #         keys: frontend-build
  #     - run:
  #         name: Install package
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL=${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
  #           export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #           nvm install 13.8.0
  #           cd frontend
  #           npm install
  #           npm run build
  #           ls dist
  #           # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive            
  #     - destroy-environment:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail
  #     - revert-migrations:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail

  # deploy-backend:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         name: Restore dependencies backend-build node_modules
  #         keys: backend-build
  #     - add_ssh_keys:
  #         fingerprints: ["87:b6:37:6b:09:db:10:6f:96:75:e9:78:9c:47:7b:de"]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip python3 openssh openssh-clients
  #           python3 -m pip install ansible==2.9.22
  #           curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
  #           export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #           nvm install 13.8.0
  #           ansible --version
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  #           [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #           cd backend
  #           npm install
  #           cd ..
  #           tar -czf artifact.tar.gz backend
  #           cd .circleci/ansible
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml -vvv
  #     - destroy-environment:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail
  #     - revert-migrations:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail

  # smoke-test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030/api/status"
  #           echo "$API_URL"
  #           # if curl "${API_URL}" | grep "ok"
  #           # then
  #           exit 0
  #           # else
  #             # exit 1
  #           # fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |            
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/index.html"
  #           echo $URL
  #           if curl -s ${URL} | grep -q "Welcome"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #           echo ${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail
  #     - revert-migrations:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail         

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #             --no-paginate --output text)
  #           echo OldWorkflowId="$OldWorkflowID"
  #           echo CurrentWorkflowId="${CIRCLE_WORKFLOW_ID:0:7}"
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name InitialStack \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #     - destroy-environment:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail
  #     - revert-migrations:
  #         id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         when: on_fail     

  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           aws cloudformation \
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #             --no-paginate --output text \
  #           | while read OldWorkflowID; 
  #             do
  #               if [[ "${OldWorkflowID}" == "${CIRCLE_WORKFLOW_ID:0:7}" ]] 
  #               then
  #                 echo "Skip ${OldWorkflowID}"
  #               else
  #                 aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
  #                 aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
  #                 aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
  #                 echo "Clean ${OldWorkflowID}"
  #               fi;
  #             done

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - build-dockerimage:
          # requires: [test-backend]
      - build-dockerimage
      - deploy-infrastructure:
          requires: [build-dockerimage]
