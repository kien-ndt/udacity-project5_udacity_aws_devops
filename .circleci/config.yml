version: 2.1
      
# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here
#       when:
#         type: string
#       id:
#         type: string
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
#             aws s3 rm s3://udapeople-<< parameters.id >> --recursive
#             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
#   revert-migrations:
#     parameters:
#       when:
#         type: string
#       id:
#         type: string
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             cd backend
#             SUCCESS=$(curl -H "token: udacity-project3-devops" --request GET http://ec2-34-230-47-86.compute-1.amazonaws.com:3000/DB_MIGRATION_<< parameters.id >>)
#             echo $SUCCESS
#             if [[ "$SUCCESS" == "success" ]]
#             then
#               npm run migrations:revert
#             fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            export API_URL=""
            echo "${API_URL}"
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install jest
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install jest
            npm run test
    
  build-dockerimage:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:   
      - checkout   
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build backend image
          command: |
            echo "$DOCKERHUB_PASSWORD"
            docker login -u $DOCKERHUB_USERNAME -p "$DOCKERHUB_PASSWORD"
            docker build -t devops5-be:lastest ./backend/
            docker tag "devops5-be:lastest" "kienndt/devops5-be:${CIRCLE_WORKFLOW_ID:0:7}"
            docker push "kienndt/devops5-be:${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            sudo apt-get -y update
            sudo apt-get install -y ca-certificates curl
            sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
            sudo apt-get -y update
            sudo apt-get -y install -y kubectl
            mkdir ~/.kube
            cp .circleci/files/kube-config ~/.kube/config
      - run:
          name: Get nodes
          command:
            kubectl get nodes

workflows:
  default:
    jobs:
      - deploy-backend
